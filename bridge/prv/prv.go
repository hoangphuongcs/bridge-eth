// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package prv

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PrvMetaData contains all meta data concerning the Prv contract.
var PrvMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incognitoProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"incognitoProxy_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200311f3803806200311f8339818101604052810190620000379190620001f8565b82600490805190602001906200004f929190620000b3565b50816005908051906020019062000068929190620000b3565b5080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000464565b828054620000c1906200035b565b90600052602060002090601f016020900481019282620000e5576000855562000131565b82601f106200010057805160ff191683800117855562000131565b8280016001018555821562000131579182015b828111156200013057825182559160200191906001019062000113565b5b50905062000140919062000144565b5090565b5b808211156200015f57600081600090555060010162000145565b5090565b60006200017a6200017484620002bb565b62000292565b9050828152602081018484840111156200019957620001986200042a565b5b620001a684828562000325565b509392505050565b600081519050620001bf816200044a565b92915050565b600082601f830112620001dd57620001dc62000425565b5b8151620001ef84826020860162000163565b91505092915050565b60008060006060848603121562000214576200021362000434565b5b600084015167ffffffffffffffff8111156200023557620002346200042f565b5b6200024386828701620001c5565b935050602084015167ffffffffffffffff8111156200026757620002666200042f565b5b6200027586828701620001c5565b92505060406200028886828701620001ae565b9150509250925092565b60006200029e620002b1565b9050620002ac828262000391565b919050565b6000604051905090565b600067ffffffffffffffff821115620002d957620002d8620003f6565b5b620002e48262000439565b9050602081019050919050565b6000620002fe8262000305565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200034557808201518184015260208101905062000328565b8381111562000355576000848401525b50505050565b600060028204905060018216806200037457607f821691505b602082108114156200038b576200038a620003c7565b5b50919050565b6200039c8262000439565b810181811067ffffffffffffffff82111715620003be57620003bd620003f6565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200045581620002f1565b81146200046157600080fd5b50565b612cab80620004746000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a457c2d711610066578063a457c2d714610275578063a9059cbb146102a5578063b48272cc146102d5578063dd62ed3e14610305576100ea565b806370a08231146102095780637ba692b61461023957806395d89b4114610257576100ea565b806323b872dd116100c857806323b872dd1461015b57806324f178ff1461018b578063313ce567146101bb57806339509351146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f7610335565b60405161010491906121b7565b60405180910390f35b610127600480360381019061012291906118dd565b6103c7565b60405161013491906120c7565b60405180910390f35b6101456103e5565b6040516101529190612399565b60405180910390f35b6101756004803603810190610170919061188a565b6103ef565b60405161018291906120c7565b60405180910390f35b6101a560048036038101906101a0919061194a565b6104e7565b6040516101b291906120c7565b60405180910390f35b6101c36107c4565b6040516101d091906123b4565b60405180910390f35b6101f360048036038101906101ee91906118dd565b6107cd565b60405161020091906120c7565b60405180910390f35b610223600480360381019061021e919061181d565b610879565b6040516102309190612399565b60405180910390f35b6102416108c1565b60405161024e919061206c565b60405180910390f35b61025f6108eb565b60405161026c91906121b7565b60405180910390f35b61028f600480360381019061028a91906118dd565b61097d565b60405161029c91906120c7565b60405180910390f35b6102bf60048036038101906102ba91906118dd565b610a68565b6040516102cc91906120c7565b60405180910390f35b6102ef60048036038101906102ea9190611aed565b610a86565b6040516102fc91906120c7565b60405180910390f35b61031f600480360381019061031a919061184a565b610caf565b60405161032c9190612399565b60405180910390f35b60606004805461034490612716565b80601f016020809104026020016040519081016040528092919081815260200182805461037090612716565b80156103bd5780601f10610392576101008083540402835291602001916103bd565b820191906000526020600020905b8154815290600101906020018083116103a057829003601f168201915b5050505050905090565b60006103db6103d4610d36565b8484610d3e565b6001905092915050565b6000600354905090565b60006103fc848484610f09565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610447610d36565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104be90612279565b60405180910390fd5b6104db856104d3610d36565b858403610d3e565b60019150509392505050565b600060828b51101561052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052590612339565b60405180910390fd5b60006105398c61118a565b90506096816000015160ff1614801561055957506001816020015160ff16145b610598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058f90612259565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161461060a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060190612319565b60405180910390fd5b600260008260a00151815260200190815260200160002060009054906101000a900460ff161561066f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066690612359565b60405180910390fd5b6001600260008360a00151815260200190815260200160002060006101000a81548160ff0219169083151502179055506106b18c8c8c8c8c8c8c8c8c8c6112b3565b6000816060015190506000826080015190506106cf600083836113ec565b80600360008282546106e191906125eb565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461073691906125eb565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161079b9190612399565b60405180910390a36107af600083836113f1565b600193505050509a9950505050505050505050565b60006009905090565b600061086f6107da610d36565b8484600160006107e8610d36565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461086a91906125eb565b610d3e565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600580546108fa90612716565b80601f016020809104026020016040519081016040528092919081815260200182805461092690612716565b80156109735780601f1061094857610100808354040283529160200191610973565b820191906000526020600020905b81548152906001019060200180831161095657829003601f168201915b5050505050905090565b6000806001600061098c610d36565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4090612379565b60405180910390fd5b610a5d610a54610d36565b85858403610d3e565b600191505092915050565b6000610a7c610a75610d36565b8484610f09565b6001905092915050565b600080610a91610d36565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afa90612299565b60405180910390fd5b610b0f816000856113ec565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610b95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8c906121f9565b60405180910390fd5b8381036000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360036000828254610bec9190612641565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610c519190612399565b60405180910390a3610c65826000866113f1565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e30878787604051610c9a9493929190612087565b60405180910390a16001925050509392505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da5906122f9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1590612219565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610efc9190612399565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f70906122b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe0906121d9565b60405180910390fd5b610ff48383836113ec565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561107a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107190612239565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461110d91906125eb565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111719190612399565b60405180910390a36111848484846113f1565b50505050565b6111926113f6565b61119a6113f6565b826000815181106111ae576111ad6127e1565b5b602001015160f81c60f81b60f81c816000019060ff16908160ff1681525050826001815181106111e1576111e06127e1565b5b602001015160f81c60f81b60f81c816020019060ff16908160ff16815250506000806000806022870151935060428701519250606287015191506082870151905083856040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082856060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081856080018181525050808560a00181815250508495505050505050919050565b60008a8a6040516020016112c8929190612044565b604051602081830303815290604052805190602001209050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b81526004016113509b9a999897969594939291906120e2565b60206040518083038186803b15801561136857600080fd5b505afa15801561137c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a0919061191d565b6113df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d6906122d9565b60405180910390fd5b5050505050505050505050565b505050565b505050565b6040518060c00160405280600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681525090565b600061147461146f846123f4565b6123cf565b9050808382526020820190508285602086028201111561149757611496612849565b5b60005b858110156114c757816114ad8882611730565b84526020840193506020830192505060018101905061149a565b5050509392505050565b60006114e46114df84612420565b6123cf565b9050808382526020820190508285602086028201111561150757611506612849565b5b60005b85811015611537578161151d888261175a565b84526020840193506020830192505060018101905061150a565b5050509392505050565b600061155461154f8461244c565b6123cf565b9050808382526020820190508285602086028201111561157757611576612849565b5b60005b858110156115a7578161158d88826117f3565b84526020840193506020830192505060018101905061157a565b5050509392505050565b60006115c46115bf84612478565b6123cf565b905080838252602082019050828560208602820111156115e7576115e6612849565b5b60005b8581101561161757816115fd8882611808565b8452602084019350602083019250506001810190506115ea565b5050509392505050565b600061163461162f846124a4565b6123cf565b9050828152602081018484840111156116505761164f61284e565b5b61165b8482856126d4565b509392505050565b60008135905061167281612c02565b92915050565b600082601f83011261168d5761168c612844565b5b813561169d848260208601611461565b91505092915050565b600082601f8301126116bb576116ba612844565b5b81356116cb8482602086016114d1565b91505092915050565b600082601f8301126116e9576116e8612844565b5b81356116f9848260208601611541565b91505092915050565b600082601f83011261171757611716612844565b5b81356117278482602086016115b1565b91505092915050565b60008135905061173f81612c19565b92915050565b60008151905061175481612c19565b92915050565b60008135905061176981612c30565b92915050565b600082601f83011261178457611783612844565b5b8135611794848260208601611621565b91505092915050565b60008083601f8401126117b3576117b2612844565b5b8235905067ffffffffffffffff8111156117d0576117cf61283f565b5b6020830191508360018202830111156117ec576117eb612849565b5b9250929050565b60008135905061180281612c47565b92915050565b60008135905061181781612c5e565b92915050565b60006020828403121561183357611832612858565b5b600061184184828501611663565b91505092915050565b6000806040838503121561186157611860612858565b5b600061186f85828601611663565b925050602061188085828601611663565b9150509250929050565b6000806000606084860312156118a3576118a2612858565b5b60006118b186828701611663565b93505060206118c286828701611663565b92505060406118d3868287016117f3565b9150509250925092565b600080604083850312156118f4576118f3612858565b5b600061190285828601611663565b9250506020611913858286016117f3565b9150509250929050565b60006020828403121561193357611932612858565b5b600061194184828501611745565b91505092915050565b6000806000806000806000806000806101408b8d03121561196e5761196d612858565b5b60008b013567ffffffffffffffff81111561198c5761198b612853565b5b6119988d828e0161176f565b9a505060206119a98d828e016117f3565b99505060408b013567ffffffffffffffff8111156119ca576119c9612853565b5b6119d68d828e016116a6565b98505060608b013567ffffffffffffffff8111156119f7576119f6612853565b5b611a038d828e01611678565b9750506080611a148d828e0161175a565b96505060a0611a258d828e0161175a565b95505060c08b013567ffffffffffffffff811115611a4657611a45612853565b5b611a528d828e016116d4565b94505060e08b013567ffffffffffffffff811115611a7357611a72612853565b5b611a7f8d828e01611702565b9350506101008b013567ffffffffffffffff811115611aa157611aa0612853565b5b611aad8d828e016116a6565b9250506101208b013567ffffffffffffffff811115611acf57611ace612853565b5b611adb8d828e016116a6565b9150509295989b9194979a5092959850565b600080600060408486031215611b0657611b05612858565b5b600084013567ffffffffffffffff811115611b2457611b23612853565b5b611b308682870161179d565b93509350506020611b43868287016117f3565b9150509250925092565b6000611b598383611d34565b60208301905092915050565b6000611b718383611d52565b60208301905092915050565b6000611b898383611ff1565b60208301905092915050565b6000611ba18383612026565b60208301905092915050565b611bb681612675565b82525050565b6000611bc782612515565b611bd1818561258b565b9350611bdc836124d5565b8060005b83811015611c0d578151611bf48882611b4d565b9750611bff83612557565b925050600181019050611be0565b5085935050505092915050565b6000611c2582612520565b611c2f818561259c565b9350611c3a836124e5565b8060005b83811015611c6b578151611c528882611b65565b9750611c5d83612564565b925050600181019050611c3e565b5085935050505092915050565b6000611c838261252b565b611c8d81856125ad565b9350611c98836124f5565b8060005b83811015611cc9578151611cb08882611b7d565b9750611cbb83612571565b925050600181019050611c9c565b5085935050505092915050565b6000611ce182612536565b611ceb81856125be565b9350611cf683612505565b8060005b83811015611d27578151611d0e8882611b95565b9750611d198361257e565b925050600181019050611cfa565b5085935050505092915050565b611d3d81612687565b82525050565b611d4c81612687565b82525050565b611d5b81612693565b82525050565b611d6a81612693565b82525050565b6000611d7b82612541565b611d8581856125cf565b9350611d958185602086016126e3565b80840191505092915050565b6000611dad83856125da565b9350611dba8385846126d4565b611dc38361285d565b840190509392505050565b6000611dd98261254c565b611de381856125da565b9350611df38185602086016126e3565b611dfc8161285d565b840191505092915050565b6000611e146023836125da565b9150611e1f8261286e565b604082019050919050565b6000611e376022836125da565b9150611e42826128bd565b604082019050919050565b6000611e5a6022836125da565b9150611e658261290c565b604082019050919050565b6000611e7d6026836125da565b9150611e888261295b565b604082019050919050565b6000611ea0601a836125da565b9150611eab826129aa565b602082019050919050565b6000611ec36028836125da565b9150611ece826129d3565b604082019050919050565b6000611ee66021836125da565b9150611ef182612a22565b604082019050919050565b6000611f096025836125da565b9150611f1482612a71565b604082019050919050565b6000611f2c601e836125da565b9150611f3782612ac0565b602082019050919050565b6000611f4f6024836125da565b9150611f5a82612ae9565b604082019050919050565b6000611f726014836125da565b9150611f7d82612b38565b602082019050919050565b6000611f956013836125da565b9150611fa082612b61565b602082019050919050565b6000611fb86019836125da565b9150611fc382612b8a565b602082019050919050565b6000611fdb6025836125da565b9150611fe682612bb3565b604082019050919050565b611ffa816126bd565b82525050565b612009816126bd565b82525050565b61202061201b826126bd565b612779565b82525050565b61202f816126c7565b82525050565b61203e816126c7565b82525050565b60006120508285611d70565b915061205c828461200f565b6020820191508190509392505050565b60006020820190506120816000830184611bad565b92915050565b600060608201905061209c6000830187611bad565b81810360208301526120af818587611da1565b90506120be6040830184612000565b95945050505050565b60006020820190506120dc6000830184611d43565b92915050565b6000610160820190506120f8600083018e611d43565b612105602083018d611d61565b612112604083018c612000565b8181036060830152612124818b611c1a565b90508181036080830152612138818a611bbc565b905061214760a0830189611d61565b61215460c0830188611d61565b81810360e08301526121668187611c78565b905081810361010083015261217b8186611cd6565b90508181036101208301526121908185611c1a565b90508181036101408301526121a58184611c1a565b90509c9b505050505050505050505050565b600060208201905081810360008301526121d18184611dce565b905092915050565b600060208201905081810360008301526121f281611e07565b9050919050565b6000602082019050818103600083015261221281611e2a565b9050919050565b6000602082019050818103600083015261223281611e4d565b9050919050565b6000602082019050818103600083015261225281611e70565b9050919050565b6000602082019050818103600083015261227281611e93565b9050919050565b6000602082019050818103600083015261229281611eb6565b9050919050565b600060208201905081810360008301526122b281611ed9565b9050919050565b600060208201905081810360008301526122d281611efc565b9050919050565b600060208201905081810360008301526122f281611f1f565b9050919050565b6000602082019050818103600083015261231281611f42565b9050919050565b6000602082019050818103600083015261233281611f65565b9050919050565b6000602082019050818103600083015261235281611f88565b9050919050565b6000602082019050818103600083015261237281611fab565b9050919050565b6000602082019050818103600083015261239281611fce565b9050919050565b60006020820190506123ae6000830184612000565b92915050565b60006020820190506123c96000830184612035565b92915050565b60006123d96123ea565b90506123e58282612748565b919050565b6000604051905090565b600067ffffffffffffffff82111561240f5761240e612810565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561243b5761243a612810565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561246757612466612810565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561249357612492612810565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156124bf576124be612810565b5b6124c88261285d565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006125f6826126bd565b9150612601836126bd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561263657612635612783565b5b828201905092915050565b600061264c826126bd565b9150612657836126bd565b92508282101561266a57612669612783565b5b828203905092915050565b60006126808261269d565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156127015780820151818401526020810190506126e6565b83811115612710576000848401525b50505050565b6000600282049050600182168061272e57607f821691505b60208210811415612742576127416127b2565b5b50919050565b6127518261285d565b810181811067ffffffffffffffff821117156127705761276f612810565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e76616c696420696e737427732064617461000000000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e76616c696420696e707574206d696e7420646174610000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e76616c696420746f6b656e000000000000000000000000600082015250565b7f45524332303a20696e76616c696420696e737400000000000000000000000000600082015250565b7f45524332303a20747820697320616c7265616479207573656400000000000000600082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b612c0b81612675565b8114612c1657600080fd5b50565b612c2281612687565b8114612c2d57600080fd5b50565b612c3981612693565b8114612c4457600080fd5b50565b612c50816126bd565b8114612c5b57600080fd5b50565b612c67816126c7565b8114612c7257600080fd5b5056fea2646970667358221220dacac07427887290ff8422d4cdb426a2fe1a82bcf99e97d8108e84ef2c686b8e64736f6c63430008070033",
}

// PrvABI is the input ABI used to generate the binding from.
// Deprecated: Use PrvMetaData.ABI instead.
var PrvABI = PrvMetaData.ABI

// PrvBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrvMetaData.Bin instead.
var PrvBin = PrvMetaData.Bin

// DeployPrv deploys a new Ethereum contract, binding an instance of Prv to it.
func DeployPrv(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, incognitoProxy_ common.Address) (common.Address, *types.Transaction, *Prv, error) {
	parsed, err := PrvMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PrvBin), backend, name_, symbol_, incognitoProxy_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Prv{PrvCaller: PrvCaller{contract: contract}, PrvTransactor: PrvTransactor{contract: contract}, PrvFilterer: PrvFilterer{contract: contract}}, nil
}

// Prv is an auto generated Go binding around an Ethereum contract.
type Prv struct {
	PrvCaller     // Read-only binding to the contract
	PrvTransactor // Write-only binding to the contract
	PrvFilterer   // Log filterer for contract events
}

// PrvCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrvCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrvTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrvFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrvSession struct {
	Contract     *Prv              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrvCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrvCallerSession struct {
	Contract *PrvCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PrvTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrvTransactorSession struct {
	Contract     *PrvTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrvRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrvRaw struct {
	Contract *Prv // Generic contract binding to access the raw methods on
}

// PrvCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrvCallerRaw struct {
	Contract *PrvCaller // Generic read-only contract binding to access the raw methods on
}

// PrvTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrvTransactorRaw struct {
	Contract *PrvTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrv creates a new instance of Prv, bound to a specific deployed contract.
func NewPrv(address common.Address, backend bind.ContractBackend) (*Prv, error) {
	contract, err := bindPrv(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Prv{PrvCaller: PrvCaller{contract: contract}, PrvTransactor: PrvTransactor{contract: contract}, PrvFilterer: PrvFilterer{contract: contract}}, nil
}

// NewPrvCaller creates a new read-only instance of Prv, bound to a specific deployed contract.
func NewPrvCaller(address common.Address, caller bind.ContractCaller) (*PrvCaller, error) {
	contract, err := bindPrv(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrvCaller{contract: contract}, nil
}

// NewPrvTransactor creates a new write-only instance of Prv, bound to a specific deployed contract.
func NewPrvTransactor(address common.Address, transactor bind.ContractTransactor) (*PrvTransactor, error) {
	contract, err := bindPrv(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrvTransactor{contract: contract}, nil
}

// NewPrvFilterer creates a new log filterer instance of Prv, bound to a specific deployed contract.
func NewPrvFilterer(address common.Address, filterer bind.ContractFilterer) (*PrvFilterer, error) {
	contract, err := bindPrv(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrvFilterer{contract: contract}, nil
}

// bindPrv binds a generic wrapper to an already deployed contract.
func bindPrv(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrvABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prv *PrvRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prv.Contract.PrvCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prv *PrvRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prv.Contract.PrvTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prv *PrvRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prv.Contract.PrvTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prv *PrvCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prv.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prv *PrvTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prv.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prv *PrvTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prv.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prv *PrvCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prv.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prv *PrvSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prv.Contract.Allowance(&_Prv.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prv *PrvCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prv.Contract.Allowance(&_Prv.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prv *PrvCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prv.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prv *PrvSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prv.Contract.BalanceOf(&_Prv.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prv *PrvCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prv.Contract.BalanceOf(&_Prv.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prv *PrvCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Prv.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prv *PrvSession) Decimals() (uint8, error) {
	return _Prv.Contract.Decimals(&_Prv.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Prv *PrvCallerSession) Decimals() (uint8, error) {
	return _Prv.Contract.Decimals(&_Prv.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prv *PrvCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prv.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prv *PrvSession) Name() (string, error) {
	return _Prv.Contract.Name(&_Prv.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prv *PrvCallerSession) Name() (string, error) {
	return _Prv.Contract.Name(&_Prv.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prv *PrvCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prv.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prv *PrvSession) Symbol() (string, error) {
	return _Prv.Contract.Symbol(&_Prv.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prv *PrvCallerSession) Symbol() (string, error) {
	return _Prv.Contract.Symbol(&_Prv.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prv *PrvCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Prv.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prv *PrvSession) TotalSupply() (*big.Int, error) {
	return _Prv.Contract.TotalSupply(&_Prv.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prv *PrvCallerSession) TotalSupply() (*big.Int, error) {
	return _Prv.Contract.TotalSupply(&_Prv.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prv *PrvTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prv.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prv *PrvSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.Approve(&_Prv.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prv *PrvTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.Approve(&_Prv.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prv *PrvTransactor) Burn(opts *bind.TransactOpts, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prv.contract.Transact(opts, "burn", incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prv *PrvSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.Burn(&_Prv.TransactOpts, incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prv *PrvTransactorSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.Burn(&_Prv.TransactOpts, incognitoAddress, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prv *PrvTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prv.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prv *PrvSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.DecreaseAllowance(&_Prv.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prv *PrvTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.DecreaseAllowance(&_Prv.TransactOpts, spender, subtractedValue)
}

// IncognitoProxy is a paid mutator transaction binding the contract method 0x7ba692b6.
//
// Solidity: function incognitoProxy() returns(address)
func (_Prv *PrvTransactor) IncognitoProxy(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prv.contract.Transact(opts, "incognitoProxy")
}

// IncognitoProxy is a paid mutator transaction binding the contract method 0x7ba692b6.
//
// Solidity: function incognitoProxy() returns(address)
func (_Prv *PrvSession) IncognitoProxy() (*types.Transaction, error) {
	return _Prv.Contract.IncognitoProxy(&_Prv.TransactOpts)
}

// IncognitoProxy is a paid mutator transaction binding the contract method 0x7ba692b6.
//
// Solidity: function incognitoProxy() returns(address)
func (_Prv *PrvTransactorSession) IncognitoProxy() (*types.Transaction, error) {
	return _Prv.Contract.IncognitoProxy(&_Prv.TransactOpts)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prv *PrvTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prv.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prv *PrvSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.IncreaseAllowance(&_Prv.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prv *PrvTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.IncreaseAllowance(&_Prv.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prv *PrvTransactor) Mint(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prv.contract.Transact(opts, "mint", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prv *PrvSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prv.Contract.Mint(&_Prv.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prv *PrvTransactorSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prv.Contract.Mint(&_Prv.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Prv *PrvTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prv.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Prv *PrvSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.Transfer(&_Prv.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Prv *PrvTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.Transfer(&_Prv.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Prv *PrvTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prv.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Prv *PrvSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.TransferFrom(&_Prv.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Prv *PrvTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prv.Contract.TransferFrom(&_Prv.TransactOpts, sender, recipient, amount)
}

// PrvApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Prv contract.
type PrvApprovalIterator struct {
	Event *PrvApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvApproval represents a Approval event raised by the Prv contract.
type PrvApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prv *PrvFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*PrvApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prv.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &PrvApprovalIterator{contract: _Prv.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prv *PrvFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PrvApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prv.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvApproval)
				if err := _Prv.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prv *PrvFilterer) ParseApproval(log types.Log) (*PrvApproval, error) {
	event := new(PrvApproval)
	if err := _Prv.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Prv contract.
type PrvDepositIterator struct {
	Event *PrvDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvDeposit represents a Deposit event raised by the Prv contract.
type PrvDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prv *PrvFilterer) FilterDeposit(opts *bind.FilterOpts) (*PrvDepositIterator, error) {

	logs, sub, err := _Prv.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &PrvDepositIterator{contract: _Prv.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prv *PrvFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *PrvDeposit) (event.Subscription, error) {

	logs, sub, err := _Prv.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvDeposit)
				if err := _Prv.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prv *PrvFilterer) ParseDeposit(log types.Log) (*PrvDeposit, error) {
	event := new(PrvDeposit)
	if err := _Prv.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Prv contract.
type PrvTransferIterator struct {
	Event *PrvTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvTransfer represents a Transfer event raised by the Prv contract.
type PrvTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prv *PrvFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*PrvTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prv.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PrvTransferIterator{contract: _Prv.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prv *PrvFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PrvTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prv.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvTransfer)
				if err := _Prv.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prv *PrvFilterer) ParseTransfer(log types.Log) (*PrvTransfer, error) {
	event := new(PrvTransfer)
	if err := _Prv.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
